(demac (test name . body)
  `(catch
    (let ()
      (prin1 (str 'test " " ',name " ... "))
      ,@body
      (print 'ok))
    (fn (e) (print (list 'test 'failed ',name e)))))

(de (assert cond)
  (or cond (raise 'assert)))

(demac (assert= a b)
  `(let ((x ,a)
         (y ,b))
     (or (= x y)
         (raise (list 'assert= '(,a ,b) 'but 'got (list x y))))))


(test letrec
  ;; single recursion
  (assert
   (= 11
      (letrec ((f (fn (x)
                    (if (> x 10)
                      x
                      (f (+ x 1))))))
        (f 0))))
  
  ;; mutual recursion
  (assert
   (= 11
      (letrec ((f (fn (x) (if (> x 10) x (g (+ x 1)))))
               (g (fn (x) (if (> x 10) x (f (+ x 1))))))
       (f 0)))))


(test record-case
  (assert=
   'a
   (record-case '(foo a b)
     ((foo a b) a)
     (else      'b)))

  (assert=
   'b
   (record-case '(bar a b)
     ((foo a b) a)
     (else      'b)))

  (assert=
   'x
   (catch
    (record-case '(bar a b)
      ((foo a b) a))
    (fn (_) 'x))))


(test cond
  (letrec
      ((f
        (fn (n)
          (cond
           ((= n 1) 'a)
           ((= n 2) 'b)
           (else    'c)))))
    (assert= 'a (f 1))
    (assert= 'b (f 2))
    (assert= 'c (f 3))))


(test threading-macro
  (assert= 2 (-> 1 inc))
  (assert= 1 (-> 3 (- 2)))
  (assert= 3 (-> 1 (+ 2) (- 2) inc inc)))
