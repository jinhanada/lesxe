(def list (fn Xs Xs))

(def + (fn (a b) (%prim:add a b)))
(def - (fn (a b) (%prim:sub a b)))
(def * (fn (a b) (%prim:mul a b)))
(def / (fn (a b) (%prim:div a b)))
(def mod (fn (a b)) (%prim:mod a b))


;; I/O
;; =====================================
(def FD-STDIN  0)
(def FD-STDOUT 1)
(def FD-STDERR 2)

(def io:getc
     (fn (FD) (%prim:getc FD)))

(def io:putc
     (fn (FD C) (%prim:putc FD C)))

(def getc
     (fn () (%prim:getc FD-STDIN)))

(def putc
     (fn (C) (%prim:putc FD-STDOUT C)))

(def c:newline 10)

(def newline
     (fn () (putc c:newline)))


;; Macro System
;; =====================================

(def MACRO-TABLE ())

(def expand-macro
     (fn (expr) expr))

(set! %pre-eval
      (fn (expr)
        (expand-macro expr)))
