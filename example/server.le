(de (http:method-sym s)
  (cond
   ((str= s "get")  'get)
   ((str= s "post") 'post)
   (else s)))

(de (http:req-method req) (car (car req)))
(de (http:req-path   req) (second (car req)))
(de (http:req-fields req) (second req))
(de (http:req-body   req) (third  req))

(de (http:parse-request req)
  ;; => ((method path version) fields body)
  (let ((xs (str:split1 req "\r\n\r\n")))
    (if (nil? xs) nil
        (let ((header  (car xs))
              (body    (cdr xs))
              (header  (str:split header "\r\n"))
              (reqline (car header))
              (fields  (cdr header))
              (reqline (str:split reqline " "))
              (reqline (list (http:method-sym (car reqline))
                             (second reqline)
                             (third  reqline)))
              (fields (loop rec ((xs fields) (acc))
                        (if xs
                            (rec (cdr xs) (cons (str:split1 (car xs) ": ") acc))
                            (list:reverse! acc)))))
          (list reqline fields body)))))

(de (http:html-response html state)
  (let ((len (+ (str:len html) 3)))
    (str "http/1.0 " state "\r\n"
         "content-length: " len "\r\n"
         "content-type: text/html\r\n"
         "connection: close\r\n"
         "\r\n"
         html
         "\r\n\r\n")))

(def html:200 "200 ok")
(def html:404 "404 not found")


;; ===== example application =====

(def app:message "hello")
(def app:dev? true)

(de (app:dev:reqs req)
  (str
   "<p>" (http:req-path req) "</p>"
   "<p> message: " app:message "</p>"
   "<h2>request</h2>"
   "<pre>" (car req) "</pre>"
   "<h2>fields</h2>"
   "<pre>" (str:join (second req) "\n") "</pre>"
   "<h2>body</h2>"
   "<pre>" (third req) "</pre>"
   "<form action=\"/set-message\" method=\"post\"><div><textarea name=\"message\" row=10 col=40>"
   app:message
   "</textarea></div><div><input type=\"submit\">send</input></div></form>"
   ))

(de (app:res res req state)
  (http:html-response
   (if app:dev? (str res (app:dev:reqs req)) res)
   state))

(de (title s)
  (str "<h1>" s "</h1>"))

(def menu
     (str
      "<p>"
      (str:join
       (list:map
        '(("/"            "root")
          ("/hello"       "hello")
          ("/hello/world" "hello-world"))
        (fn (x) (str "<a href=\"" (car x) "\">" (second x) "</a>")))
       " | ")
      "</p>"))

(de (handle-hello req)
  (prn "handle: hello")
  (-> (str (title "hello!")
           menu)
      (app:res req html:200)))

(de (handle-hello-world req)
  (prn "handle: hello-world")
  (-> (str (title "hello world!")
           menu)
      (app:res req html:200)))

(de (handle-root req)
  (prn "handle: root")
  (-> (str (title "welcome")
           menu)
      (app:res req html:200)))

(de (handle-set-message req)
  (prn "handle: set-message")
  (set! app:message (cdr (str:split1 (http:req-body req) "=")))
  (-> (str (title "done.")
           menu)
      (app:res req html:200)))

(de (handle-404 req)
  (-> (str (title "404 not found"))
      (app:res req html:404)))

(def app:handlers
  (list
   (cons "/hello"       handle-hello)
   (cons "/hello/world" handle-hello-world)
   (cons "/set-message" handle-set-message)
   (cons "/"            handle-root)))

(de (app:handle req)
  (let ((path (http:req-path req)))
    (loop next ((xs app:handlers))
      (cond
       ((nil? xs) (handle-404 req))
       ((str= path (caar xs)) ((cdar xs) req))
       (else (next (cdr xs)))))))


;; ===== entrypoint =====

(de (app:run port)
  (let ((sock (sock:make port)))
    (sock:listen sock 32)
    (prn "listen 0.0.0.0 on port" port)
    (loop rec ()
      (prn "===== listen =====")
      (catch
       (let ((wsock (sock:accept sock))
             (_     (print "===== accept:" wsock))
             (data  (sock:recv wsock 4096)))
         (if data
           (let ((req (http:parse-request data))
                 (res (app:handle req)))
             (when app:dev?
               (prn "request")
               (list:each req prn))
             (sock:send wsock res))
           (let ()
             (prn "===== no data arrived =====" wsock)
             (sock:send wsock "")))
         (sock:close wsock)
         (prn "===== wsock closed =====\n"))
       (fn (e) (print e)))
      (rec))
    (sock:close sock)))

(app:run 3000)
