;; from
;; - http://matt.might.net/articles/by-example-continuation-passing-style/
;; - http://matt.might.net/articles/cps-conversion/

(de app1 '(f x))
(de lam1 '(lambda x (f x)))

;; in
;; exp ::= (exp exp)
;;      |  var
;;      |  (lambda var exp)

(de (cps-conv1 expr cont)
  (if (pair? expr)
    (record-case expr
      ((lambda v e)
       (let ((k (sym:gen)))
         `(,cont (lambda (,k ,v) ,(cps-conv1 e k)))))
      (else
       (let ((f (car expr))
             (x (second expr))
             (kf (sym:gen))
             (kx (sym:gen))
             (e2 `(,kf ,cont ,kx))
             (e1 (cps-conv1 x `(lambda ,kx ,e2))))
         (cps-conv1 f `(lambda ,kf ,e1)))))
    `(,cont ,expr)))


(prn "===== cps-conv1 =====")
(prn (cps-conv1 app1 'halt))
(prn (cps-conv1 lam1 'halt))

;; in
;; <expr> ::= (lambda <var> <expr>)
;;         |  <var>
;;         |  (<expr> <expr>)
;; out
;; <aexpr>  ::= (lambda (<var>*) <cexpr>)
;;           |  <var>
;; <cexpr> ::= (<aexpr> <aexpr>*)


(de (cps-conv2 expr cont)
  (letrec
      ((M (fn (expr)
            (if (pair? expr)
              (record-case expr
                ((lambda var expr)
                 (let ((k (sym:gen)))
                   `(lambda (,k ,var) ,(T expr k)))))
              expr)))
       (T (fn (expr cont)
            (if (pair? expr)
              (record-case expr
                ((lambda . _) `(,cont ,(M expr)))
                (else
                 (let ((f  (car expr))
                       (x  (second expr))
                       (kf (sym:gen))
                       (kx (sym:gen))
                       (e2 (list kf cont kx))
                       (e1 (T x `(lambda (,kx) ,e2))))
                   (T f `(lambda (,kf) ,e1)))))
              `(,cont ,(M expr))))))
    (T expr cont)))

(prn "===== cps-conv2 =====")
(prn (cps-conv2 app1 'halt))
(prn (cps-conv2 lam1 'halt))
